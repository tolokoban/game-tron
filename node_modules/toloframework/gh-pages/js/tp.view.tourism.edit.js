/** @module tp.view.tourism.edit */require( 'tp.view.tourism.edit', function(require, module, exports) { var _=function(){var D={"en":{"altitude":"Altitude","duration":"Duration","level":"Difficulty"},"fr":{"altitude":"Altitude","duration":"Durée","level":"Difficulté"}},X=require("$").intl;function _(){return X(D,arguments);}_.all=D;return _}();
    // Code behind.
"use strict";


//===============================
// XJS:View autogenerated code.
try {
  module.exports = function() {
    //--------------------
    // Dependent modules.
    var $ = require('dom');
    var PM = require('tfw.binding.property-manager');
    var Tag = require('tfw.view').Tag;
    var Link = require('tfw.binding.link');
    var Converters = require('tfw.binding.converters');
    var TfwViewTextbox = require('tfw.view.textbox');
    var TfwViewCheckbox = require('tfw.view.checkbox');
    var TfwViewLanguage = require('tfw.view.language');
    //-------------------
    // Global functions.
    function defVal(args, attName, attValue) { return args[attName] === undefined ? attValue : args[attName]; };
    //-------------------
    // Global variables.
    var conv_boolean = Converters.get('boolean');
    var conv_multilang = Converters.get('multilang');
    //-------------------
    // Class definition.
    var ViewClass = function( args ) {
      try {
        if( typeof args === 'undefined' ) args = {};
        this.$elements = {};
        var that = this;
        var pm = PM(this);
        //--------------------
        // Create attributes.
        pm.create("durationVisible", { cast: conv_boolean });
        pm.create("duration", { cast: conv_multilang });
        pm.create("levelVisible", { cast: conv_boolean });
        pm.create("level", { cast: conv_multilang });
        pm.create("altitudeVisible", { cast: conv_boolean });
        pm.create("altitude", { cast: conv_multilang });
        //------------------
        // Create elements.
        var e_ = new Tag('DIV', ["class"]);
        var e_0 = new Tag('DIV');
        var e_00 = new Tag('DIV');
        var e_000 = new TfwViewCheckbox({ content: _("level") });
        $.add( e_00, e_000 );
        var e_01 = new Tag('DIV');
        var e_levelText = new TfwViewTextbox();
        this.$elements.levelText = e_levelText;
        var e_011 = new TfwViewLanguage();
        $.add( e_01, e_levelText, e_011 );
        $.add( e_0, e_00, e_01 );
        var e_1 = new Tag('DIV');
        var e_10 = new Tag('DIV');
        var e_100 = new TfwViewCheckbox({ content: _("duration") });
        $.add( e_10, e_100 );
        var e_11 = new Tag('DIV');
        var e_durationText = new TfwViewTextbox();
        this.$elements.durationText = e_durationText;
        var e_111 = new TfwViewLanguage();
        $.add( e_11, e_durationText, e_111 );
        $.add( e_1, e_10, e_11 );
        var e_2 = new Tag('DIV');
        var e_20 = new Tag('DIV');
        var e_200 = new TfwViewCheckbox({ content: _("altitude") });
        $.add( e_20, e_200 );
        var e_21 = new Tag('DIV');
        var e_altitudeText = new TfwViewTextbox();
        this.$elements.altitudeText = e_altitudeText;
        var e_211 = new TfwViewLanguage();
        $.add( e_21, e_altitudeText, e_211 );
        $.add( e_2, e_20, e_21 );
        $.add( e_, e_0, e_1, e_2 );
        //-----------------------
        // Declare root element.
        Object.defineProperty( this, '$', {value: e_.$, writable: false, enumerable: false, configurable: false } );
        //-------
        // Links
        new Link({
          A:{obj: that, name: 'levelVisible'},
          B:{obj: e_000, name: 'value'}
        });
        new Link({
          A:{obj: that, name: 'levelVisible', open: false},
          B:{obj: e_levelText, name: 'focus'}
        });
        new Link({
          A:{obj: that, name: 'levelVisible'},
          B:{obj: e_levelText, name: 'visible'}
        });
        new Link({
          A:{obj: that, name: 'level'},
          B:{obj: e_011, name: 'value'}
        });
        new Link({
          A:{obj: that.$elements.levelText, name: 'value'},
          B:{obj: e_011, name: 'current'}
        });
        new Link({
          A:{obj: that, name: 'levelVisible'},
          B:{obj: e_011, name: 'visible'}
        });
        new Link({
          A:{obj: that, name: 'durationVisible'},
          B:{obj: e_100, name: 'value'}
        });
        new Link({
          A:{obj: that, name: 'durationVisible', open: false},
          B:{obj: e_durationText, name: 'focus'}
        });
        new Link({
          A:{obj: that, name: 'durationVisible'},
          B:{obj: e_durationText, name: 'visible'}
        });
        new Link({
          A:{obj: that, name: 'duration'},
          B:{obj: e_111, name: 'value'}
        });
        new Link({
          A:{obj: that.$elements.durationText, name: 'value'},
          B:{obj: e_111, name: 'current'}
        });
        new Link({
          A:{obj: that, name: 'durationVisible'},
          B:{obj: e_111, name: 'visible'}
        });
        new Link({
          A:{obj: that, name: 'altitudeVisible'},
          B:{obj: e_200, name: 'value'}
        });
        new Link({
          A:{obj: that, name: 'altitudeVisible', open: false},
          B:{obj: e_altitudeText, name: 'focus'}
        });
        new Link({
          A:{obj: that, name: 'altitudeVisible'},
          B:{obj: e_altitudeText, name: 'visible'}
        });
        new Link({
          A:{obj: that, name: 'altitude'},
          B:{obj: e_211, name: 'value'}
        });
        new Link({
          A:{obj: that.$elements.altitudeText, name: 'value'},
          B:{obj: e_211, name: 'current'}
        });
        new Link({
          A:{obj: that, name: 'altitudeVisible'},
          B:{obj: e_211, name: 'visible'}
        });
        //----------------------
        // Initialize elements.
        e_.class = "tp-view-tourism-edit";
        //------------------------
        // Initialize attributes.
        this.durationVisible = defVal(args, "durationVisible", false);
        this.duration = defVal(args, "duration", {});
        this.levelVisible = defVal(args, "levelVisible", false);
        this.level = defVal(args, "level", {});
        this.altitudeVisible = defVal(args, "altitudeVisible", false);
        this.altitude = defVal(args, "altitude", {});
        $.addClass(this, 'view', 'custom');
      }
      catch( ex ) {
        console.error('mod/tp.view.tourism.edit.js', ex);
        throw Error('Instantiation error in XJS of "mod/tp.view.tourism.edit.js":\n' + ex)
      }
    };
    return ViewClass;
  }();
}
catch( ex ) {
  throw Error('Definition error in XJS of "mod/tp.view.tourism.edit.js"\n' + ex)
}


  
module.exports._ = _;
/**
 * @module tp.view.tourism.edit
 * @see module:$
 * @see module:dom
 * @see module:tfw.binding.property-manager
 * @see module:tfw.view
 * @see module:tfw.binding.link
 * @see module:tfw.binding.converters
 * @see module:tfw.view.textbox
 * @see module:tfw.view.checkbox
 * @see module:tfw.view.language

 */
});