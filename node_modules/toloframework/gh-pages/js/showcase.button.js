/** @module showcase.button */require( 'showcase.button', function(require, module, exports) { var _=function(){var D={"en":{},"fr":{}},X=require("$").intl;function _(){return X(D,arguments);}_.all=D;return _}();
    // Code behind.
"use strict";


//===============================
// XJS:View autogenerated code.
try {
  module.exports = function() {
    //--------------------
    // Dependent modules.
    var $ = require('dom');
    var Tag = require('tfw.view').Tag;
    var Link = require('tfw.binding.link');
    var TfwViewButton = require('tfw.view.button');
    var TfwViewTextbox = require('tfw.view.textbox');
    var TfwViewCheckbox = require('tfw.view.checkbox');
    //-------------------
    // Class definition.
    var ViewClass = function( args ) {
      try {
        if( typeof args === 'undefined' ) args = {};
        this.$elements = {};
        var that = this;
        //------------------
        // Create elements.
        var e_ = new Tag('SECTION');
        var e_0 = new Tag('ARTICLE', ["class"]);
        var e_00 = new TfwViewButton({ content: "VNegoce Power!" });
        $.add( e_0, e_00 );
        var e_1 = new Tag('ARTICLE', ["class"]);
        var e_10 = new TfwViewButton({ content: "VNegoce Power!" });
        $.add( e_1, e_10 );
        var e_2 = new Tag('ARTICLE', ["class"]);
        var e_20 = new TfwViewButton({ content: "VNegoce Power!" });
        $.add( e_2, e_20 );
        var e_3 = new Tag('ARTICLE', ["class"]);
        var e_30 = new TfwViewButton({ content: "VNegoce Power!" });
        $.add( e_3, e_30 );
        var e_visible = new TfwViewCheckbox({
          content: "visible",
          value: true
        });
        this.$elements.visible = e_visible;
        var e_enabled = new TfwViewCheckbox({
          content: "enabled",
          value: true
        });
        this.$elements.enabled = e_enabled;
        var e_wide = new TfwViewCheckbox({
          content: "wide",
          value: false
        });
        this.$elements.wide = e_wide;
        var e_flat = new TfwViewCheckbox({
          content: "flat",
          value: false
        });
        this.$elements.flat = e_flat;
        var e_responsive = new TfwViewCheckbox({
          content: "responsive",
          value: false
        });
        this.$elements.responsive = e_responsive;
        var e_inverted = new TfwViewCheckbox({
          content: "inverted",
          value: false
        });
        this.$elements.inverted = e_inverted;
        var e_type = new TfwViewTextbox({
          label: "type",
          value: "default"
        });
        this.$elements.type = e_type;
        var e_B = new Tag('SPAN');
        $.add( e_B, "Icon: " );
        var e_icon = new Tag('INPUT', ["placeholder","value"]);
        this.$elements.icon = e_icon;
        $.add( e_, e_0, e_1, e_2, e_3, e_visible, e_enabled, e_wide, e_flat, e_responsive, e_inverted, e_type, e_B, e_icon );
        //-----------------------
        // Declare root element.
        Object.defineProperty( this, '$', {value: e_.$, writable: false, enumerable: false, configurable: false } );
        //-------
        // Links
        new Link({
          A:{obj: that.$elements.visible, name: 'value'},
          B:{obj: e_00, name: 'visible'}
        });
        new Link({
          A:{obj: that.$elements.enabled, name: 'value'},
          B:{obj: e_00, name: 'enabled'}
        });
        new Link({
          A:{obj: that.$elements.wide, name: 'value'},
          B:{obj: e_00, name: 'wide'}
        });
        new Link({
          A:{obj: that.$elements.flat, name: 'value'},
          B:{obj: e_00, name: 'flat'}
        });
        new Link({
          A:{obj: that.$elements.icon, name: 'value'},
          B:{obj: e_00, name: 'icon'}
        });
        new Link({
          A:{obj: that.$elements.responsive, name: 'value'},
          B:{obj: e_00, name: 'responsive'}
        });
        new Link({
          A:{obj: that.$elements.inverted, name: 'value'},
          B:{obj: e_00, name: 'inverted'}
        });
        new Link({
          A:{obj: that.$elements.type, name: 'value'},
          B:{obj: e_00, name: 'type', delay: 1500}
        });
        new Link({
          A:{obj: that.$elements.visible, name: 'value'},
          B:{obj: e_10, name: 'visible'}
        });
        new Link({
          A:{obj: that.$elements.enabled, name: 'value'},
          B:{obj: e_10, name: 'enabled'}
        });
        new Link({
          A:{obj: that.$elements.wide, name: 'value'},
          B:{obj: e_10, name: 'wide'}
        });
        new Link({
          A:{obj: that.$elements.flat, name: 'value'},
          B:{obj: e_10, name: 'flat'}
        });
        new Link({
          A:{obj: that.$elements.icon, name: 'value'},
          B:{obj: e_10, name: 'icon'}
        });
        new Link({
          A:{obj: that.$elements.responsive, name: 'value'},
          B:{obj: e_10, name: 'responsive'}
        });
        new Link({
          A:{obj: that.$elements.inverted, name: 'value'},
          B:{obj: e_10, name: 'inverted'}
        });
        new Link({
          A:{obj: that.$elements.type, name: 'value'},
          B:{obj: e_10, name: 'type', delay: 1500}
        });
        new Link({
          A:{obj: that.$elements.visible, name: 'value'},
          B:{obj: e_20, name: 'visible'}
        });
        new Link({
          A:{obj: that.$elements.enabled, name: 'value'},
          B:{obj: e_20, name: 'enabled'}
        });
        new Link({
          A:{obj: that.$elements.wide, name: 'value'},
          B:{obj: e_20, name: 'wide'}
        });
        new Link({
          A:{obj: that.$elements.flat, name: 'value'},
          B:{obj: e_20, name: 'flat'}
        });
        new Link({
          A:{obj: that.$elements.icon, name: 'value'},
          B:{obj: e_20, name: 'icon'}
        });
        new Link({
          A:{obj: that.$elements.responsive, name: 'value'},
          B:{obj: e_20, name: 'responsive'}
        });
        new Link({
          A:{obj: that.$elements.inverted, name: 'value'},
          B:{obj: e_20, name: 'inverted'}
        });
        new Link({
          A:{obj: that.$elements.type, name: 'value'},
          B:{obj: e_20, name: 'type', delay: 1500}
        });
        new Link({
          A:{obj: that.$elements.visible, name: 'value'},
          B:{obj: e_30, name: 'visible'}
        });
        new Link({
          A:{obj: that.$elements.enabled, name: 'value'},
          B:{obj: e_30, name: 'enabled'}
        });
        new Link({
          A:{obj: that.$elements.wide, name: 'value'},
          B:{obj: e_30, name: 'wide'}
        });
        new Link({
          A:{obj: that.$elements.flat, name: 'value'},
          B:{obj: e_30, name: 'flat'}
        });
        new Link({
          A:{obj: that.$elements.icon, name: 'value'},
          B:{obj: e_30, name: 'icon'}
        });
        new Link({
          A:{obj: that.$elements.responsive, name: 'value'},
          B:{obj: e_30, name: 'responsive'}
        });
        new Link({
          A:{obj: that.$elements.inverted, name: 'value'},
          B:{obj: e_30, name: 'inverted'}
        });
        new Link({
          A:{obj: that.$elements.type, name: 'value'},
          B:{obj: e_30, name: 'type', delay: 1500}
        });
        //----------------------
        // Initialize elements.
        e_.$.style.margin = "0"
        e_.$.style.padding = "0"
        e_0.class = "thm-bg0";
        e_0.$.style.display = "inline-block"
        e_0.$.style.margin = "2px"
        e_0.$.style.padding = "4px"
        e_0.$.style.border = "1px solid rgba(0,0,0,.5)"
        e_1.class = "thm-bg1";
        e_1.$.style.display = "inline-block"
        e_1.$.style.margin = "2px"
        e_1.$.style.padding = "4px"
        e_1.$.style.border = "1px solid rgba(0,0,0,.5)"
        e_2.class = "thm-bg2";
        e_2.$.style.display = "inline-block"
        e_2.$.style.margin = "2px"
        e_2.$.style.padding = "4px"
        e_2.$.style.border = "1px solid rgba(0,0,0,.5)"
        e_3.class = "thm-bg3";
        e_3.$.style.display = "inline-block"
        e_3.$.style.margin = "2px"
        e_3.$.style.padding = "4px"
        e_3.$.style.border = "1px solid rgba(0,0,0,.5)"
        e_icon.placeholder = "icon";
        e_icon.value = "ok";
        $.addClass(this, 'view', 'custom');
      }
      catch( ex ) {
        console.error('mod/showcase.button.js', ex);
        throw Error('Instantiation error in XJS of "mod/showcase.button.js":\n' + ex)
      }
    };
    return ViewClass;
  }();
}
catch( ex ) {
  throw Error('Definition error in XJS of "mod/showcase.button.js"\n' + ex)
}


  
module.exports._ = _;
/**
 * @module showcase.button
 * @see module:$
 * @see module:dom
 * @see module:tfw.view
 * @see module:tfw.binding.link
 * @see module:tfw.view.button
 * @see module:tfw.view.textbox
 * @see module:tfw.view.checkbox

 */
});