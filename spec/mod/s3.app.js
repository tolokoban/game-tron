"use strict";require("s3.app",function(require,module,exports){function createBoundaries(){var w=0<arguments.length&&void 0!==arguments[0]?arguments[0]:512,h=1<arguments.length&&void 0!==arguments[1]?arguments[1]:512,polyline=new Polyline(5,55);return polyline.move(0,h-110),polyline.add(),polyline.move(50,0),polyline.add(),polyline.move(0,50),polyline.add(),polyline.move(w-110,0),polyline.add(),polyline.move(0,-50),polyline.add(),polyline.move(50,0),polyline.add(),polyline.move(0,110-h),polyline.add(),polyline.move(-50,0),polyline.add(),polyline.move(0,-50),polyline.add(),polyline.move(110-w,0),polyline.add(),polyline.move(0,50),polyline.add(),polyline.move(-50,0),[polyline]}function paintPolyline(ctx,polyline,color){ctx.beginPath(),ctx.moveTo(polyline.firstX,polyline.firstY),polyline.foreachTail(function(x,y){return ctx.lineTo(x,y)}),ctx.strokeStyle=color,ctx.stroke()}var Dom=require("dom"),Car=require("s3.car"),Action=require("s3.tron.action"),Polyline=require("s3.polyline");exports.start=function(){function anim(time){window.requestAnimationFrame(anim),ctx.clearRect(0,0,canvas.width,canvas.height);var _iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _step,boundary,_iterator=boundaries[Symbol.iterator]();!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0)boundary=_step.value,paintPolyline(ctx,boundary,"#fff")}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{_iteratorNormalCompletion||null==_iterator.return||_iterator.return()}finally{if(_didIteratorError)throw _iteratorError}}for(var car,_i2=0;_i2<cars.length;_i2++)if(car=cars[_i2],!car.isDead){paintPolyline(ctx,car.polyline,car.color);var x0=car.polyline.lastX,y0=car.polyline.lastY;car.move(time);for(var obstacle,x1=car.polyline.lastX,y1=car.polyline.lastY,_i3=0;_i3<cars.length;_i3++)if(obstacle=cars[_i3],!obstacle.isDead&&obstacle.polyline.collide(x0,y0,x1,y1)){car.isDead=!0,console.log("DEAD!");break}if(!car.isDead){var _iteratorNormalCompletion2=!0,_didIteratorError2=!1,_iteratorError2=void 0;try{for(var _step2,_boundary,_iterator2=boundaries[Symbol.iterator]();!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=!0)if(_boundary=_step2.value,_boundary.collide(x0,y0,x1,y1)){car.isDead=!0,console.log("DEAD in boundary!");break}}catch(err){_didIteratorError2=!0,_iteratorError2=err}finally{try{_iteratorNormalCompletion2||null==_iterator2.return||_iterator2.return()}finally{if(_didIteratorError2)throw _iteratorError2}}}}}for(var ennemy,canvas=Dom("canvas"),ctx=canvas.getContext("2d"),player=new Car({action:Action.create({type:"keyboard"}),x:12,y:200,dir:1,color:"#ff0"}),ennemy1=new Car({action:Action.create({type:"ai",targets:[player]}),reaction:100,x:500,y:312,dir:3,color:"#0ff"}),ennemy2=new Car({action:Action.create({type:"ai",targets:[player]}),reaction:200,x:256,y:12,dir:2,color:"#f0f"}),ennemy3=new Car({action:Action.create({type:"ai",targets:[player]}),reaction:300,x:312,y:500,dir:0,color:"#f84"}),cars=[player,ennemy1,ennemy2,ennemy3],boundaries=createBoundaries(),_arr=[ennemy1,ennemy2,ennemy3],_i=0;_i<_arr.length;_i++)ennemy=_arr[_i],ennemy.action.car=ennemy,ennemy.action.cars=cars,ennemy.action.boundaries=boundaries;canvas.setAttribute("width",canvas.clientWidth),canvas.setAttribute("height",canvas.clientHeight),window.requestAnimationFrame(anim)},module.exports._=function _(){return""}});