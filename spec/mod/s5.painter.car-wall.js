"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var descriptor,i=0;i<props.length;i++)descriptor=props[i],descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}require("s5.painter.car-wall",function(require,module){function createElemBuff(gl,capacity){for(var elem=[],buff=gl.createBuffer(),ptr=0,i=0;i<capacity;i++)elem.push(ptr+0,ptr+1,ptr+2,ptr+1,ptr+2,ptr+3),ptr+=4;return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,buff),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(elem),gl.STATIC_DRAW),console.info("[car-wall] elem=",elem),buff}var GLOBAL={vert:"// Perspective\nuniform mat4 uniProjection;\n// Point\nattribute vec4 attPoint;\n\nvarying vec2 varUV;\n\nvoid main() {\n  varUV = vec2( attPoint.w, attPoint.z );\n  gl_Position = uniProjection * vec4(attPoint.xyz, 1);\n}\n\n\n",frag:"precision mediump float;\n\nuniform vec3 uniColor;\nvarying vec2 varUV;\n\n\nvoid main() {\n  gl_FragColor = vec4(uniColor * (.5 + varUV.y), 1);\n}\n"};var Program=require("webgl.program"),CarWall=function(){function CarWall(gl,polyline,color){_classCallCheck(this,CarWall),this.gl=gl,this.prg=new Program(gl,GLOBAL),this.polyline=polyline,this.color=color,this.buffVert=gl.createBuffer(),this.buffElem=createElemBuff(gl,polyline.capacity)}return _createClass(CarWall,[{key:"paint",value:function paint(cameraMatrix){var gl=this.gl,prg=this.prg,polyline=this.polyline,buffElem=this.buffElem,buffVert=this.buffVert,color=this.color;prg.use(),prg.$uniColor=color,prg.$uniProjection=cameraMatrix,prg.bindAttribs(buffVert,"attPoint"),gl.bindBuffer(gl.ARRAY_BUFFER,buffVert),gl.bufferData(gl.ARRAY_BUFFER,polyline.data,gl.STATIC_DRAW),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,buffElem),gl.drawElements(gl.TRIANGLES,6*polyline.capacity,gl.UNSIGNED_SHORT,0)}}]),CarWall}();module.exports=CarWall,module.exports._=function _(){return""}});