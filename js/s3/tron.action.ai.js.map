{"version":3,"sources":["tron.action.ai.js"],"names":["require","module","exports","_","readonly","NONE","LEFT","RIGHT","ACCEL","Ai","car","cars","boundaries","that","status","lastTime","actionRight","actionLeft","actionAccel","time","x0","polyline","lastX","y0","lastY","x1","vx","y1","vy","collide","rnd","Math","random","x1R","vxRight","y1R","vyRight","x1L","vxLeft","y1L","vyLeft","obstacle","isDead","boundary","create","args"],"mappings":"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","sourcesContent":["/** @module s3/tron.action.ai */require( 's3/tron.action.ai', function(require, module, exports) { var _=function(){return ''};   \"use strict\";\r\n\r\n\r\nconst { readonly } = require( \"common\" );\r\n\r\nconst NONE = 0,\r\n      LEFT = 1,\r\n      RIGHT = 2,\r\n      ACCEL = 3;\r\n\r\n\r\nclass Ai {\r\n    constructor({ car, cars, boundaries }) {\r\n        const that = this;\r\n\r\n        this.status = NONE;\r\n        this.car = car;\r\n        this.cars = cars;\r\n        this.boundaries = boundaries;\r\n        this.lastTime = 0;\r\n        \r\n        readonly( this, {\r\n            actionRight() {\r\n                return that.status === RIGHT;\r\n            },\r\n            actionLeft() {\r\n                return that.status === LEFT;\r\n            },\r\n            actionAccel() {\r\n                return that.status === ACCEL;\r\n            }\r\n        });\r\n    }\r\n\r\n    process( time ) {\r\n        if ( time - this.lastTime < 100 ) {\r\n            this.status = NONE;\r\n            return;\r\n        }\r\n        \r\n        const car = this.car,\r\n              x0 = car.polyline.lastX,\r\n              y0 = car.polyline.lastY,\r\n              x1 = x0 + car.vx * 10,\r\n              y1 = y0 + car.vy * 10;\r\n\r\n        if( this.collide( x0, y0, x1, y1 ) ) {\r\n            const rnd = Math.random() * 1000;\r\n            if( rnd < 500 ) {\r\n                const x1R = x0 + car.vxRight * 15,\r\n                      y1R = y0 + car.vyRight * 15;\r\n                this.status = this.collide( x0, y0, x1R, y1R ) ? LEFT : RIGHT;\r\n            } else {\r\n                const x1L = x0 + car.vxLeft * 15,\r\n                      y1L = y0 + car.vyLeft * 15;\r\n                this.status = this.collide( x0, y0, x1L, y1L ) ? LEFT : RIGHT;\r\n            }\r\n        } else {\r\n            this.status = NONE;\r\n\r\n            const rnd = Math.random() * 1000;\r\n            if( rnd > 995 ) {\r\n                this.status = RIGHT;\r\n            } else if( rnd > 990 ) {\r\n                this.status = LEFT;\r\n            } else if( rnd > 988 ) {\r\n                this.status = ACCEL;\r\n            } else {\r\n                this.status = NONE;\r\n            }\r\n        }\r\n\r\n        if( this.status !== NONE ) {\r\n            this.lastTime = time;\r\n        }\r\n    }\r\n\r\n    collide( x0, y0, x1, y1 ) {\r\n        for( const obstacle of this.cars ) {\r\n            if( obstacle.isDead ) continue;\r\n            if( obstacle.polyline.collide( x0, y0, x1, y1 ) ) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        for( const boundary of this.boundaries ) {\r\n            if( boundary.collide( x0, y0, x1, y1 ) ) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nexports.create = function( args ) {\r\n    return new Ai( args );\r\n};\r\n\r\n\r\n\r\nmodule.exports._ = _;\n})"]}