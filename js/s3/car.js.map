{"version":3,"sources":["car.js"],"names":["require","module","exports","_","Polyline","readonly","IDX_X","IDX_Y","MINUS_ONE","DIRECTIONS","NB_DIRS","length","RIGHT","LEFT","DEFAULT_X","DEFAULT_Y","MIN_SPEED","MAX_SPEED","BREAK","Car","action","x","y","dir","color","minSpeed","maxSpeed","breakPower","that","speed","lastTime","polyline","vx","vy","vxRight","vyRight","vxLeft","vyLeft","time","delta","process","Math","max","actionRight","add","actionLeft","actionAccel","dirV","move"],"mappings":"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","sourcesContent":["/** @module s3/car */require( 's3/car', function(require, module, exports) { var _=function(){return ''};   \"use strict\";\r\n\r\nconst Polyline = require(\"s3/polyline\"),\r\n      { readonly } = require(\"common\");\r\n\r\nconst IDX_X = 0;\r\nconst IDX_Y = 1;\r\nconst MINUS_ONE = -1;\r\nconst DIRECTIONS = [ [0, MINUS_ONE], [1, 0], [0, 1], [MINUS_ONE, 0] ];\r\nconst NB_DIRS = DIRECTIONS.length;\r\nconst RIGHT = 1;\r\nconst LEFT = 3;\r\nconst DEFAULT_X = 0;\r\nconst DEFAULT_Y = 256;\r\nconst MIN_SPEED = 0.050;\r\nconst MAX_SPEED = 0.250;\r\nconst BREAK = 0.0005;\r\n\r\n\r\nclass Car {\r\n    constructor({\r\n        action,\r\n        x = DEFAULT_X,\r\n        y = DEFAULT_Y,\r\n        dir = RIGHT,\r\n        color = \"cyan\",\r\n        minSpeed = MIN_SPEED,\r\n        maxSpeed = MAX_SPEED,\r\n        breakPower = BREAK\r\n    }) {\r\n        const that = this;\r\n\r\n        this.action = action;\r\n        this.speed = minSpeed;\r\n        this.lastTime = 0;\r\n        this.dir = dir;\r\n\r\n        readonly( this, {\r\n            minSpeed,\r\n            maxSpeed,\r\n            breakPower,\r\n            color,\r\n            polyline: new Polyline( x, y ),\r\n            vx() {\r\n                return DIRECTIONS[that.dir][IDX_X];\r\n            },\r\n            vy() {\r\n                return DIRECTIONS[that.dir][IDX_Y];\r\n            },\r\n            vxRight() {\r\n                return DIRECTIONS[(that.dir + 1) % NB_DIRS][IDX_X];\r\n            },\r\n            vyRight() {\r\n                return DIRECTIONS[(that.dir + 1) % NB_DIRS][IDX_Y];\r\n            },\r\n            vxLeft() {\r\n                return DIRECTIONS[(that.dir + 3) % NB_DIRS][IDX_X];\r\n            },\r\n            vyLeft() {\r\n                return DIRECTIONS[(that.dir + 3) % NB_DIRS][IDX_Y];\r\n            }\r\n        });\r\n    }\r\n\r\n    move( time ) {\r\n        if( this.lastTime === 0 ) {\r\n            this.lastTime = time;\r\n            return;\r\n        }\r\n\r\n        const delta = time - this.lastTime;\r\n        this.lastTime = time;\r\n\r\n        this.action.process( time, delta );\r\n\r\n        // -------------\r\n        // Décelération.\r\n        if( this.speed > this.minSpeed ) {\r\n            this.speed = Math.max( this.minSpeed, this.speed - this.breakPower * delta );\r\n        }\r\n\r\n        // --------------------\r\n        // Gestion des touches.\r\n        const action = this.action;\r\n        if( action.actionRight ) {\r\n            this.polyline.add();\r\n            this.dir = (this.dir + RIGHT) % DIRECTIONS.length;\r\n        } else if( action.actionLeft ) {\r\n            this.polyline.add();\r\n            this.dir = (this.dir + LEFT) % DIRECTIONS.length;\r\n        }\r\n        if( action.actionAccel ) {\r\n            this.speed = this.maxSpeed;\r\n        }\r\n\r\n\r\n        const dirV = DIRECTIONS[this.dir],\r\n              vx = this.speed * delta * dirV[0],\r\n              vy = this.speed * delta * dirV[1];\r\n        this.polyline.move( vx, vy );\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = Car;\r\n\r\n\r\n\r\nmodule.exports._ = _;\n})"]}